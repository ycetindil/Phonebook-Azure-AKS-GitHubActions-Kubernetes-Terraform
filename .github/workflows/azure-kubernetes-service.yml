name: 'Terraform'

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  ARM_CLIENT_ID       : "${{ secrets.CLIENT_ID }}"
  ARM_CLIENT_SECRET   : "${{ secrets.CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID : "${{ secrets.SUBSCRIPTION_ID }}"
  ARM_TENANT_ID       : "${{ secrets.TENANT_ID }}"
  TF_FOLDER           : "infra-tf"
  K8S_FOLDER          : "k8s"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ${{ env.TF_FOLDER }}
      run: terraform init

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      working-directory: ${{ env.TF_FOLDER }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: terraform apply -auto-approve

  NSG:
    name: 'NSG Rule'
    needs: terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Login to Azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 
    
    - name: 'Create NSG rule'
      run: |
        NSG_NAME=$(az network nsg list --resource-group ${{ vars.AKS_NODE_RG_NAME }} --query "[?contains(name, 'aks')].[name]" --output tsv)
        az network nsg rule create --nsg-name $NSG_NAME --resource-group ${{ vars.AKS_NODE_RG_NAME }} --name open3000130002 --access Allow --priority 100 --destination-port-ranges 30001-30002

  AKS:
    name: 'AKS Tasks'
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # AKS configuration
    - name: AKS configuration
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: '{{ vars.AKS_NAME }}'
        resource-group: '{{ vars.RG_NAME }}'

    # Deploy to AKS
    - name: Deploy to AKS
      uses: Azure/k8s-deploy@v4
      with:
        manifests: '{{ K8S_FOLDER }}'
